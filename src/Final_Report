 Report on MPC Project

 In this project we use Model Predictive Control to drive a car around a track in a simulator. In this approach we use Kinematic model of the car. Kinematic models are simplifications of dynamic models that ignore tire forces, gravity, and mass. This simplification reduces the accuracy of the models, but it also makes them more tractable. At low and moderate speeds, kinematic models often approximate the actual vehicle dynamics.

 A vehicle in map co-ordinates has two states which represent the x & y locations in this co-ordinate system. Also the orienation of the vehicle wrt to the x axis in this system is a part of the state of the vehicle given by psi. Since the vehicle is moving and has finite velocity in a particular direction, we use the velocity v as one of that states too. So till now our state is described by [x, y, psi, v]. 

 One part of the project is to derive a model that captures how the state evolves over time and how the inputs interact with the states and influence the future state of the vehicle. Inputs influence the state and in our case we have two actuators, the steering wheel angle and the accelerator as inputs. In case of accelerator +ve value means acceleration and -ve values means the vehicle is breaking. Hence we use 2 inputs, delta for steering angle and a for acceleration.

 In our case, we are getting the way points and the state of the vehicle from the simulator (lines 88 to 94). Using these waypoints and the current state, we have to calculate the control inputs. This is where the MPC controller is used.

 First we convert the current steering angle received from the simulator into radians and transform the waypoints into car co-ordinate system to work out all calculations with a single reference frame. In a real car, an actuation command won't execute instantly - there will be a delay as the command propagates through the system. A realistic delay might be on the order of 100 milliseconds. This is a problem called LATENCY. Latency happens due to the actuator dynamics. For example, there is a delay between when the steering angle was commanded to go to a certain value and when it actually reaches that value. One advantage of the MPC controller is that we can model this latency into the vehicle model. Lines 122-128 takes care of incorporating latency into the model.

 Next we use the waypoints and use polyfit to fit a 3rd order polynomial to those waypoints and get the coeffs of the polynomial. These coeffs are used in calculating (a) the cross track error (cte): the error between the desired trajectory and the actual trajectory of the vehicle, (b) the orientation error (epsi): orientation of the vehicle wrt the direction of desired trajectory. Next we create the state using these calculations and feed it to the solver that returns the control inputs for the vehicle wrt the state and the coeffs we pass to the solver.

 200,3000,100,50,1000,50